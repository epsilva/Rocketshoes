{"ast":null,"code":"import _defineProperty from \"/Users/esdraspinheiro/Documents/Desenvolvimento/ProjetoGoStack/redux/Rocketshoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put, all, takeLatest, select } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\nimport { toast } from 'react-toastify'; //Genarator mesama coisa que por o async\n\nfunction* addToCart({\n  id\n}) {\n  const productExist = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, \"/stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExist ? productExist.amount : 0;\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque!');\n    return;\n  }\n\n  if (productExist) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    //yield = mesma coisa que o await\n    const response = yield call(api.get, \"/products/\".concat(id));\n\n    const data = _objectSpread({}, response.data, {\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    });\n\n    yield put(addToCartSuccess(data));\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, \"/stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque!');\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCart), takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount)]);","map":{"version":3,"sources":["/Users/esdraspinheiro/Documents/Desenvolvimento/ProjetoGoStack/redux/Rocketshoes/src/store/modules/cart/saga.js"],"names":["call","put","all","takeLatest","select","api","history","addToCartSuccess","updateAmountSuccess","formatPrice","toast","addToCart","id","productExist","state","cart","find","p","stock","get","stockAmount","data","amount","currentAmount","error","response","priceFormatted","price","push","updateAmount"],"mappings":";;;;;;AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CAEA;;AACA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AACxB,QAAMC,YAAY,GAAG,MAAMT,MAAM,CAC7BU,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CADoB,CAAjC;AAIA,QAAMM,KAAK,GAAG,MAAMlB,IAAI,CAACK,GAAG,CAACc,GAAL,mBAAoBP,EAApB,EAAxB;AAEA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;AACA,QAAMC,aAAa,GAAGV,YAAY,GAAGA,YAAY,CAACS,MAAhB,GAAyB,CAA3D;AACA,QAAMA,MAAM,GAAGC,aAAa,GAAG,CAA/B;;AAEA,MAAID,MAAM,GAAGF,WAAb,EAA0B;AACtBV,IAAAA,KAAK,CAACc,KAAN,CAAY,wCAAZ;AACA;AACH;;AAED,MAAIX,YAAJ,EAAkB;AACd,UAAMZ,GAAG,CAACO,mBAAmB,CAACI,EAAD,EAAKU,MAAL,CAApB,CAAT;AACH,GAFD,MAEO;AACH;AACA,UAAMG,QAAQ,GAAG,MAAMzB,IAAI,CAACK,GAAG,CAACc,GAAL,sBAAuBP,EAAvB,EAA3B;;AAEA,UAAMS,IAAI,qBACHI,QAAQ,CAACJ,IADN;AAENC,MAAAA,MAAM,EAAE,CAFF;AAGNI,MAAAA,cAAc,EAAEjB,WAAW,CAACgB,QAAQ,CAACJ,IAAT,CAAcM,KAAf;AAHrB,MAAV;;AAMA,UAAM1B,GAAG,CAACM,gBAAgB,CAACc,IAAD,CAAjB,CAAT;AACAf,IAAAA,OAAO,CAACsB,IAAR,CAAa,OAAb;AACH;AAGJ;;AAED,UAAUC,YAAV,CAAuB;AAAEjB,EAAAA,EAAF;AAAMU,EAAAA;AAAN,CAAvB,EAAuC;AACnC,MAAIA,MAAM,IAAI,CAAd,EAAiB;AAEjB,QAAMJ,KAAK,GAAG,MAAMlB,IAAI,CAACK,GAAG,CAACc,GAAL,mBAAoBP,EAApB,EAAxB;AACA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;;AAEA,MAAIA,MAAM,GAAGF,WAAb,EAA0B;AACtBV,IAAAA,KAAK,CAACc,KAAN,CAAY,wCAAZ;AACA;AACH;;AAED,QAAMvB,GAAG,CAACO,mBAAmB,CAACI,EAAD,EAAKU,MAAL,CAApB,CAAT;AACH;;AAED,eAAepB,GAAG,CAAC,CACfC,UAAU,CAAC,mBAAD,EAAsBQ,SAAtB,CADK,EAEfR,UAAU,CAAC,6BAAD,EAAgC0B,YAAhC,CAFK,CAAD,CAAlB","sourcesContent":["import { call, put, all, takeLatest, select } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\nimport { toast } from 'react-toastify';\n\n//Genarator mesama coisa que por o async\nfunction* addToCart({ id }) {\n    const productExist = yield select(\n        state => state.cart.find(p => p.id === id)\n    );\n\n    const stock = yield call(api.get, `/stock/${id}`);\n\n    const stockAmount = stock.data.amount;\n    const currentAmount = productExist ? productExist.amount : 0;\n    const amount = currentAmount + 1;\n\n    if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque!');\n        return;\n    }\n\n    if (productExist) {\n        yield put(updateAmountSuccess(id, amount));\n    } else {\n        //yield = mesma coisa que o await\n        const response = yield call(api.get, `/products/${id}`);\n\n        const data = {\n            ...response.data,\n            amount: 1,\n            priceFormatted: formatPrice(response.data.price)\n        }\n\n        yield put(addToCartSuccess(data))\n        history.push('/cart');\n    }\n\n\n}\n\nfunction* updateAmount({ id, amount }) {\n    if (amount <= 0) return;\n\n    const stock = yield call(api.get, `/stock/${id}`);\n    const stockAmount = stock.data.amount;\n\n    if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque!');\n        return;\n    }\n\n    yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([\n    takeLatest('@cart/ADD_REQUEST', addToCart),\n    takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount)\n]);"]},"metadata":{},"sourceType":"module"}